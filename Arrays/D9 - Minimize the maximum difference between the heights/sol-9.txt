Using Sorting - O(nlogn) Time and O(1) Space
The idea is to sort the array and check the maximum height difference 
at each index by increasing the height of towers up to that index and 
decreasing the height of towers beyond that index.

For any index i, if we add k to all heights in subarray arr[0...i-1] 
and subtract k from all heights in subarray arr[i...n-1], then we know 
that smallest height = min(arr[0]+k, arr[i]-k) and tallest 
height = max(arr[i-1]+k, arr[n-1]-k). So, the smallest difference 
between tallest height and smallest height over all indices will be 
the result.

We can see that for any index i, the smallest height depends on 
arr[0] and arr[i] and the tallest height depends on arr[i - 1] and 
arr[n - 1], so instead of modifying the subarrays arr[0...i-1] and 
arr[i...n-1], we can simply modify arr[0], arr[i - 1], arr[i] and 
arr[n - 1] to get the smallest difference between heights.

Time Complexity: O(nlogn), as we are sorting the array.
Auxiliary Space: O(1)