Table of Content

[Naive Approach] Using a temporary array - O(n) Time and O(n) Space
[Expected Approach - 1] Using Two Pointers - O(n) Time and O(1) Space
[Expected Approach - 2] By Swapping Elements - O(n) Time and O(1) Space
[Alternate Approach] Using Recursion - O(n) Time and O(n) Space
Using Inbuilt Methods - O(n) Time and O(1) Space


---

1)[Naive Approach] Using a temporary array - 
O(n) Time and O(n) Space
The idea is to use a temporary array to store the reverse of the array.

Create a temporary array of same size as the original array.
Now, copy all elements from original array to the temporary array in 
reverse order.
Finally, copy all the elements from temporary array back to the
 original array.

Time Complexity: O(n), Copying elements to a new array is a linear 
operation.
Auxiliary Space: O(n), as we are using an extra array to store the 
reversed array.

---

2)[Expected Approach - 1] Using Two Pointers - 
O(n) Time and O(1) Space
The idea is to maintain two pointers: left and right, such that left 
points at the beginning of the array and right points to the end of 
the array.

While left pointer is less than the right pointer, swap the elements 
at these two positions. After each swap, increment the left pointer 
and decrement the right pointer to move towards the center of array. 
This will swap all the elements in the first half with their 
corresponding element in the second half. 

Time Complexity: O(n), as we are visiting each element exactly once.
Auxiliary Space: O(1)

---

[Expected Approach - 2] By Swapping Elements - 
O(n) Time and O(1) Space
The idea is to iterate over the first half of the array and swap each 
element with its corresponding element from the end. So, while 
iterating over the first half, any element at index i is swapped with 
the element at index (n - i - 1).

Time Complexity: O(n), the loop runs through half of the array, so 
it's linear with respect to the array size.
Auxiliary Space: O(1), no extra space is required, therefore we are
reversing the array in-place.

---

4)[Alternate Approach] Using Recursion 
- O(n) Time and O(n) Space
The idea is to use recursion and define a recursive function that 
takes a range of array elements as input and reverses it. Inside the 
recursive function,

Swap the first and last element.
Recursively call the function with the remaining subarray.

Time Complexity: O(n), the recurrence relation will be 
T(n) = T(n - 2) + O(1), which can be simplified to O(n).
Auxiliary Space: O(n), as we are using recursion stack.

---

5) Using Inbuilt Methods - O(n) Time and O(1) Space
The idea is to use inbuilt reverse methods available across different 
languages.

Time Complexity: O(n), the reverse method has linear time complexity.
Auxiliary Space: O(1) Additional space is not used to store the 
reversed array, as the in-built array method swaps the values in-place.