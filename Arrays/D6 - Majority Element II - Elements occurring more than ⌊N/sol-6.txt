Table of Content

[Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space
[Better Approach] Using Hash Map or Dictionary - 
O(n) Time and O(n) Space
[Expected Approach] Boyer-Moore’s Voting Algorithm - 
O(n) Time and O(1) Space

--

1) [Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space

The idea is to iterate over all elements and count the frequency of 
the element in the array. If the frequency of the element is greater 
than floor(n/3), add it to the result. To avoid adding duplicate 
elements into the result, we can check if the element is already 
present in the result. We can stop the iteration if we have already 
found two majority elements.

2) [Better Approach] Using Hash Map or Dictionary - 
O(n) Time and O(n) Space
The idea is to use a hash map or dictionary to count the frequency 
of each element in the array. After counting, iterate over the 
hash map and if the frequency of any element is greater than (n/3), 
push it into the result. Finally, the majority elements are returned 
after sorting.


3) [Expected Approach] Boyer-Moore’s Voting Algorithm - 
O(n) Time and O(1) Space
The idea is based on the observation that there can be at most two 
majority elements, which appear more than n/3 times. so we can use 
Boyer-Moore’s Voting algorithm. As we iterate the array, We identify 
potential majority elements by keeping track of two candidates and 
their respective counts.

Steps:

Initialize two variables ele1 = -1 and ele2 = -1, for candidates and 
two variables cnt1 = 0 and cnt2 = 0, for counting.
In each iteration,
If an element is equal to any candidate, update that candidate's count.
If count of a candidate reaches zero then replace that candidate with 
current element.
If neither candidate matches and both counts are non zero, decrement 
the counts.
After this, in second pass we check if the chosen candidates appear 
more than n/3 times in the array. If they do then include them in 
result array.
Since any element than appears more than floor(n/3) times, will 
dominate over elements that appear less frequently. Whenever we 
encounter a different element, we decrement the count of both the 
candidates. This maintains at most two candidates in the array.





